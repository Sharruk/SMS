✅ Final Polished Version (Use this directly in your Markdown or viva explanation)
Why Main.java is 3,811 Lines Long

The file Main.java serves as the central controller and entry point for the entire Learning Management System (LMS).
It contains all interactive menus, workflows, and user role operations (Principal, Admin, Teacher, Student) in a single file.

🔍 Structure Inside Main.java
Section	Approx. Lines	Description
System Initialization	1–80	Loads data, sets up repositories, and initializes the LMS.
OOP Demonstrations	82–330	Demonstrates inheritance, polymorphism, encapsulation, generics, and custom exceptions for the mini-project checklist.
Principal Menu	~600	Manages admins, appoints teachers, creates courses, and generates reports.
Admin Menu	~800	Registers students and teachers, assigns courses, and manages data.
Teacher Menu	~900	Handles assignments, grades, attendance, file uploads, and messaging.
Student Menu	~700	Manages assignment submissions, grades, and dashboard views.
Additional Features	~400	Includes search/sort, file upload, messaging, and system statistics.
💡 Why It’s All in One File

This structure was chosen to simplify execution and demonstration for the mini project:

Ensures all OOP features are visible in a single run.

Makes the menu-driven console interface easy to test.

Avoids dependency and import issues during the demonstration.

However, in real-world projects, this violates the Separation of Concerns principle — mixing user interface, business logic, and data handling in one file.

⚙️ Ideal Modular Design (For Future Refactoring)

A more maintainable and modular design would look like:

sms/
├── app/
│   ├── Main.java               → Entry point (100 lines)
│   ├── MenuSystem.java         → Handles main menu navigation
│   └── menus/
│       ├── PrincipalMenuHandler.java
│       ├── AdminMenuHandler.java
│       ├── TeacherMenuHandler.java
│       └── StudentMenuHandler.java


Each handler class would contain the specific menu and logic for that user role, making the project cleaner, easier to maintain, and better aligned with OOP principles.

🎯 Simple Explanation (Viva-Ready)

“Mam, our Main.java contains all the menu-driven logic for all four user roles.
It acts as the controller layer for our console-based system.
While it’s long, the design made it easy to demonstrate all features — from login to file upload — in one continuous flow.
In a real-world project, we would modularize it using separate menu handler classes for each role.”